AWSTemplateFormatVersion: '2010-09-09'
      
Parameters:
  CidrBlock:
    Description: "this doc contains the creation of the EC2 instances"
    Type: String
    Default: 10.10.0.0/16
    
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 
        Ref: CidrBlock
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Vpc
  
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} InternetGateway

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: 
        Ref: InternetGateway
      VpcId: 
        Ref: VPC
  
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: 
        Ref: VPC
      AvailabilityZone: !Select [ 0, !GetAZs { Ref: "AWS::Region" } ]
      CidrBlock: !Select [0, !Cidr [!Ref CidrBlock, 4, 8]]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Public Subnet (AZ1)
  
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: 
        Ref: VPC
      AvailabilityZone: !Select [ 1, !GetAZs { Ref: "AWS::Region" } ]
      CidrBlock: !Select [2, !Cidr [!Ref CidrBlock, 4, 8]]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Public Subnet (AZ2)
  
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs { Ref: "AWS::Region" } ]
      CidrBlock: !Select [1, !Cidr [!Ref CidrBlock, 4, 8]]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name "rsPrivada1"
          Value: !Sub ${AWS::StackName} Private Subnet (AZ1)

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs { Ref: "AWS::Region" } ]
      CidrBlock: !Select [3, !Cidr [!Ref CidrBlock, 4, 8]]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name "rsPrivada2"
          Value: !Sub ${AWS::StackName} Private Subnet (AZ2)
          
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Public Routes

  PublicRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Public Routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  DefaultPublicRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway 

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable2
      SubnetId: !Ref PublicSubnet2

  NatPublicIP:
        Type: "AWS::EC2::EIP"
        DependsOn: VPC
        Properties:
          Domain: vpc

  NatPublicIP2:
        Type: "AWS::EC2::EIP"
        DependsOn: VPC
        Properties:
          Domain: vpc

  NatGateway:
        Type: "AWS::EC2::NatGateway"
        DependsOn: NatPublicIP
        Properties:
          AllocationId: !GetAtt NatPublicIP.AllocationId
          SubnetId: !Ref PublicSubnet1

  NatGateway2:
        Type: "AWS::EC2::NatGateway"
        DependsOn: NatPublicIP2
        Properties:
          AllocationId: !GetAtt NatPublicIP2.AllocationId
          SubnetId: !Ref PublicSubnet2

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Private Routes

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Private Routes

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2
  
  InstanceSecurityGroup1:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: permiso ssh y http
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0        
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0        
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
  
  InstanceSecurityGroup2:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: permiso ssh a los servers privados
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 10.10.0.0/16 
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 10.10.0.0/0         
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0  
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
  
  Ec2Instance1: 
    Type: AWS::EC2::Instance
    Properties: 
      Tags:
        - Key: Name
          Value: "ec21"
      InstanceType: "t2.micro"
      ImageId: "ami-0a313d6098716f372" 
      NetworkInterfaces: 
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          GroupSet: 
            - Ref: "InstanceSecurityGroup2"
          SubnetId: !Ref PrivateSubnet1
      UserData: 
        Fn::Base64: 
          Fn::Join: [
            "\n",
            [
              "sudo apt-get update -y",
              "sudo apt install apache2 -y",
              "sudo service apache2 start",
              "echo \"<html><body><h1>PAGINA WEB 1</h1>\" > /var/www/html/index.html",
              "echo \"<br><h3>Mauro Alejandro Herrera Castro</h3>\" > /var/www/html/index.html",
              "echo \"</body></html>\" >> /var/www/html/index.html"
            ]
          ]
          
  Ec2Instance2: 
    Type: AWS::EC2::Instance
    Properties: 
      Tags:
        - Key: Name
          Value: "ec22"
      InstanceType: "t2.micro"
      ImageId: "ami-0a313d6098716f372" 
      NetworkInterfaces: 
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          GroupSet: 
            - Ref: "InstanceSecurityGroup2"
          SubnetId: !Ref PrivateSubnet2
      UserData: 
        Fn::Base64: 
          Fn::Join: [
            "\n",
            [
              "sudo apt-get update -y",
              "sudo apt install apache2 -y",
              "sudo service apache2 start",
              "echo \"<html><body><h1>PAGINA WEB 2</h1>\" > /var/www/html/index.html",
              "echo \"<br><h3>Mauro Alejandro Herrera Castro</h3>\" > /var/www/html/index.html",
              "echo \"</body></html>\" >> /var/www/html/index.html"
            ]
          ] 

Outputs:
  EC21:
    Description: "EC2 Ubuntu con apache"
    Value: !Ref Ec2Instance2
    Export:
      Name: "ec21"
  EC22:
    Description: "EC2 Ubuntu con apache"
    Value: !Ref Ec2Instance2
    Export:
      Name: "ec22"